generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model alert {
  id          Int       @id @default(autoincrement())
  description String?
  parameter   Int?
  created_at  DateTime? @db.Timestamp(6)
  user_id     Int
  movement_id Int?
  closing_id  Int?
  closing     closing?  @relation(fields: [closing_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  movement    movement? @relation(fields: [movement_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model balance {
  id                Int             @id @default(autoincrement())
  ammount           Int
  created_at        DateTime?       @db.Timestamp(6)
  payment_method_id Int?
  payment_method    payment_method? @relation(fields: [payment_method_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model closing {
  id               Int        @id @default(autoincrement())
  total            Int
  comments         String?
  expected_balance Int
  counted          Int
  difference       Int
  created_at       DateTime?  @db.Timestamp(6)
  user_id          Int
  alert            alert[]
  user             user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  movement         movement[]
}

model logs {
  id         Int       @id @default(autoincrement())
  action     String?   @db.VarChar
  user_id    Int?
  details    String?
  created_at DateTime? @db.Timestamp(6)
}

model movement {
  id                Int            @id @default(autoincrement())
  ammount           Int
  type              Boolean
  created_at        DateTime?      @db.Timestamp(6)
  user_id           Int
  closing_id        Int?
  payment_method_id Int
  alert             alert[]
  closing           closing?       @relation(fields: [closing_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payment_method    payment_method @relation(fields: [payment_method_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model payment_method {
  id             Int        @id @default(autoincrement())
  name           String     @db.VarChar
  active         Boolean
  account_number Int?
  balance        balance[]
  movement       movement[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model rol {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar
  description String
  user        user[]
}

model user {
  id         Int        @id
  name       String     @db.VarChar
  last_name  String     @db.VarChar
  email      String     @unique @db.VarChar
  password   String     @db.VarChar
  status     Boolean?
  created_at DateTime?  @db.Timestamp(6)
  rol_id     Int
  alert      alert[]
  closing    closing[]
  movement   movement[]
  rol        rol        @relation(fields: [rol_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
